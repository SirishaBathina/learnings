git clone -b release git@git.systm.com:spo-gitlab/project.git
git branch -a, git checkout feature/3-8-69/OC-299
git add <--our files   git reset HEAD .   to unstage
git commit -m "prepare cookbook for tomcat installation"
git commit -a --author="Author" --message="Issue title #id"
git status -s  <--shows modified files
git push  origin feature/69/gk-998
git pull   <-- To pull the updated code from gitlab to local, it will not work if any new files available in local
git fetch  <-- If any new branchs availabe at gitlab it will be fetched to local
git log
git diff
git stash      <--Now, you want to switch branches for customer escalation, but you don’t want to commit what you’ve been working on yet; so you’ll stash the changes
git stash list   <--Displays a list of all stashes, enabling you to see which changes are stored and access them when needed.
git stash pop = git stash apply + git stash drop
git stash pop  <-- we can get back the changes which we not commited after we switching to old branch.
git merge      <--Git merge is a command that allows you to merge branches from Git
git merge --squash branchname <-- Squash merging is a merge option that allows you to condense the Git history of topic branches when you complete a pull request. 
                  Instead of each commit on the topic branch being added to the history of the default branch, a squash merge adds all the file changes to a 
                  single new commit on the default branch.
git rebase     <--Git rebase is a command that allows developers to integrate changes from one branch to another. 
git cherrypick commit-id <--pick a commit from a branch and applying it to another branch **Make sure you are on the branch you want to apply the commit to






apt update
apt-get install git -y
git init .                  ===============>  to intilize the local repo
*********************************************************************************
passwrad less authentication
vi .netrc
aadd thers lines
machine github.com
login devops.bathinasirisha@gmail.com
password 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
***********************************************************************************
To create a file and add the files
touch f1
vi f1
git add f1
git status
git commit -m "file created"f1
git log
*************************************************************************************
##congiguration of user
git config --global user.name "SirishaBathina"
git config --global user.email "devops.bathinasirisha@gmail.com"
touch f2
vi f2
git add f2
git commit -m "file2"f2
git log 
***************************************************************************************
###Muiltiple files to create
touch siri{1..4}
git status
git add siri*
######If it is added we can get back the changes
git restore --staged siri1  <(filename)>
git restore --staged .
git commit -m "files to be commited"siri*
*****************************************************************************************
##To create an empty branch 
git switch --orphan my_empty_branch
git commit --allow-empty -m "intial empty commit and push"
git push -u origin  my_empty_branch
****************************************************************************************
I want to create files but it is not to be add and commit
we can go for vi .gitignore
harshu1
harshu2
those files willbe there but not added not commited
****************************************************************************************
git branch ===show branch list
git branch dev ====(dev branch created)
git checkout dev  =====to swtich to dev branch
touch dev{1..4}
git add dev*
git commit -m "dev commits" dev*
git log
git commit -m "dev commits" dev1 dev2  ======dev1,dev2 only commited
git checkout -b main    =======>to create a new main  branch and switch to that branch
git checkout -b feature =====>to create new feature branch
git branch -m feature bug   ========>to rename branch oldname newname
 git branch -D bug        =========>to delete the branch
switch to another branch then only delete possible
git merge feature    in dev lo em iethe files vunnayo avi anni feature lo ki vasthayi
git checkout commit id(prev commit)     ======>to checkout previous commit 
git log
git checkout commitid(new Commit)
**************************************************************************************************
Suppose unfortunately some files deleted we can restore by using
git restore siri*
touch hello
git add hello 
 i want to get back the hello changes
git restore --staged hello   =====we can get back the changes
git status
*******************************************************************************************************
git log --all              ======================>To see all commits

git checkout feature
git merge feature           ==============To merge the branch
git remote add origin https://github.com/SirishaBathina/application.git      =======>To add the code to remote repository
git push -u origin main              ======To push the code to remote repo
git tag -a "v1.0" -m "this is version 1"     ====To tag which is imp
git tag
git tag show v1.0     =====To show available commited tags
git ignore

branch potection rules in settings to scecure our repo
